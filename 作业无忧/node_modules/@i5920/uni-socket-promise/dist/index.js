"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var md5_ts_1 = require("md5-ts");
var helper_1 = require("./helper");
var pkg = require('../package.json');
var Queue = []; // 消息队列
var Pool = {}; // Promise池
var IsOpen = false; // 是否打开,socket只会open一次哦
var IsClose = false; // 是否是主动关闭
var heartTimer = null; // 心跳句柄
var reConnectTimer = null; // 重连句柄
var IsLogin = false; // 是否登录connect成功,区别IsOpen
var IsNetWork = true; // 是否有网络
var PromiseWebSocket = /** @class */ (function () {
    function PromiseWebSocket(config) {
        var _this = this;
        // console.log("%c " + pkg.name + " %c \u7248\u672C: v" + pkg.version + " %c", 'background:#35495e ; padding: 1px; border-radius: 3px 0 0 3px;  color: #fff', 'background:#41b883 ; padding: 1px; border-radius: 0 3px 3px 0;  color: #fff', 'background:transparent');
        // console.log("%c " + pkg.name + " %c \u6B22\u8FCE\u4F7F\u7528,\u6EE1\u610F\u7684\u8BDD\u6253\u4E2A\u8D4F\u5457 https://gitee.com/okcoder/uni-socket-promise %c", 'background:#35495e ; padding: 1px; border-radius: 3px 0 0 3px;  color: #fff', 'background:#41b883 ; padding: 1px; border-radius: 0 3px 3px 0;  color: #fff', 'background:transparent');
        this.config = __assign({
            debug: process.env.NODE_ENV === 'development',
            isReconnect: true,
            isHeartData: true,
            heartTime: 3000,
            reConnectTime: 3000
        }, config);
        // 初始化
        this.initSocket = function (success, fail) {
            if (IsLogin) {
                _this.config.debug && console.log('%c [uni-socket-promise] %c 已经登录了');
                typeof success === 'function' && success(_this);
                return;
            }
            // @ts-ignore
            uni.getNetworkType({
                fail: function (err) {
                    _this.config.debug && console.log('%c [socket] %c 检查网络状态失败:', err);
                    typeof fail === 'function' && fail(err, _this);
                },
                success: function (res) {
                    if (res.networkType === 'none') {
                        IsNetWork = false;
                        IsLogin = false;
                        // @ts-ignore
                        uni.showModal({
                            title: '网络错误',
                            content: '请打开网络服务',
                            showCancel: false
                        });
                        typeof fail === 'function' && fail(res, _this);
                    }
                    else {
                        IsNetWork = true;
                        _this.config.debug && console.log('[uni-socket-promise] %c 网络正常,开始建立连接...');
                        // @ts-ignore
						// console.log(_this.config.data);
                        uni.connectSocket({
                            url: _this.config.url,
							data:_this.config.data||{},
                            method: _this.config.method,
                            header: _this.config.header,
                            protocols: _this.config.protocols,
                            success: function (res) {
                                // IsLogin = true;
                                // _this.config.debug && console.log('%c [uni-socket-promise] %c 连接成功');
                                typeof success === 'function' && success(_this);
                            },
                            fail: function (err) {
                                _this.config.debug && console.log('%c [uni-socket-promise] %c 连接失败');
                                typeof fail === 'function' && fail(err, _this);
                            }
                        });
                    }
                }
            });
        };
        /**
         * 发送socket消息
         * @param string event 事件名称
         * @param object data  请求数据
         * @param object extraData  同级附加参数 注意event,data会被覆盖
         */
        this.send = function (event, data, extraData) {

            var nData = (!data || JSON.stringify(data) === '{}') ? '' : data;
            var message = Object.assign(extraData || {}, { action: event, msg: nData });
            if (typeof _this.config.onSendMessageBefore === 'function') {
                message = _this.config.onSendMessageBefore(message);
            }
			// console.log(message);
            var uuid = md5_ts_1.default(event + (helper_1.isJson(nData) ? JSON.stringify(nData) : nData));
            return new Promise(function (resolve, reject) {
                // 一摸一样的请求只响应第一次
                // 过滤了socket队列,否则队列重发送消息无法收到
                if (!Pool[uuid]) {
                    Pool[uuid] = { message: message, resolve: resolve, reject: reject };
                }
                if (IsOpen && IsLogin && IsNetWork) {
                    _this.config.debug && console.log('%c [uni-socket-promise] %c 发送消息:', message);
                    // @ts-ignore
                    _this._sendSocketMessage(message);
                    typeof _this.config.onSendMessageAfter === 'function' && _this.config.onSendMessageAfter(message);
                }
                else {
                    // 加入队列
                    Queue.push({ uuid: uuid, message: message });
                    _this.config.debug && console.log('%c [uni-socket-promise] %c 加入消息队列', message);
                }
            });
        };
        // 主动关闭
        this.close = function (option) {
            // 目前还不清楚Z主动退出socket会不会导致open关闭 暂时默认不关闭
            // IsOpen = false;
            IsLogin = false;
            // 主动退出
            IsClose = true;
            if (_this.config.isHeartData) {
                _this.config.debug && console.log('%c [uni-socket-promise] %c 关闭心跳');
                _this._clearHeart();
            }
            // @ts-ignore
            uni.closeSocket(option);
            _this.config.debug && console.log('%c [uni-socket-promise] %c 主动退出');
        };
        // 监听socket是否打开成功
        // @ts-ignore
        uni.onSocketOpen(function (header) {
            _this.config.debug && console.log('%c [uni-socket-promise] %c socket打开成功');
			_this.send(1,_this.config.data)
            typeof _this.config.onSocketOpen === 'function' && _this.config.onSocketOpen(header);
            IsOpen = true;
            IsLogin = true;
            // 判断是否需要发送心跳包
            if (_this.config.isHeartData) {
                _this.config.debug && console.log('%c [uni-socket-promise] %c 开始心跳');
                _this._clearHeart();
                _this._startHeart();
            }
            var _loop_1 = function (i) {
                _this.config.debug && console.log('%c [uni-socket-promise] %c 发送队列消息:', Queue[i].message);
                var uuid = Queue[i].uuid;
                var message = Queue[i].message;
                var event_1 = message.action;
                var data = message.msg;
                delete message.action;
                delete message.msg;
                _this.send(event_1, data, message).then(function (response) {
                    Pool[uuid].resolve(response);
                });
            };
            // 发送消息队列消息
            for (var i = 0; i < Queue.length; i++) {
                _loop_1(i);
            }
            Queue = [];
        });
        // 监听网络状态
        // @ts-ignore
        uni.onNetworkStatusChange(function (res) {
            if (res.isConnected) {
                IsNetWork = true;
                if (!IsLogin && _this.config.isReconnect) {
                    _this.config.debug && console.log('%c [uni-socket-promise] %c 监听到有网络服务,重新连接socket');
                    _this._reConnectSocket(); // 连接成功IsLogin=true
                }
            }
            else {
                _this.config.debug && console.error('%c [uni-socket-promise] %c 监听到没有网络状态');
                IsLogin = false;
                IsNetWork = false;
                _this.config.isHeartData && _this._clearHeart();
                if (typeof _this.config.onNetworkStatusNone === 'function') {
                    _this.config.onNetworkStatusNone();
                }
                else {
                    // @ts-ignore
                    uni.showModal({
                        title: '网络错误',
                        content: '请打开网络服务',
                        showCancel: false
                    });
                }
            }
        });
        // @ts-ignore
        uni.onSocketMessage(function (e) {
			console.log(e.data);
            // if (typeof _this.config.onSocketMessageBefore === 'function' && !_this.config.onSocketMessageBefore(e)) {
            //     // 如果onSocketMessageBefore返回false 那么终止下面的逻辑
            //     // 如果onSocketMessageBefore返回true 那么继续下面的逻辑
            //     return;
            // }
            var json = helper_1.isJson(e.data);
			_this.config.debug && console.log('%c [uni-socket-promise] %c 收到消息:', json);
			if (typeof _this.config.onSocketMessageAfter === 'function') {
			    _this.config.onSocketMessageAfter(json);
			}
            // var uuid = json['event'];
            // if (!json || !uuid || !Pool[uuid])
            //     return;
            // _this.config.debug && console.log('%c [uni-socket-promise] %c 收到消息:', json['data']);
            // var data = json['data'] || null;
            // if (typeof _this.config.onSocketMessageAfter === 'function') {
            //     _this.config.onSocketMessageAfter(data, Pool[uuid]);
            // }
            // else {
            //     Pool[uuid].resolve(data);
            // }
            // delete Pool[uuid];
        });
        // 监听socket被关闭
        // @ts-ignore
        uni.onSocketClose(function (res) {
            _this.config.debug && console.error( res);
            typeof _this.config.onSocketClose === 'function' && _this.config.onSocketClose(res);
            IsLogin = false;
            // 停止心跳检查
            if (_this.config.isHeartData) {
                _this.config.debug && console.log('%c [uni-socket-promise] %c 关闭心跳');
                _this._clearHeart();
            }
            if (!IsClose && _this.config.isReconnect) {
                // 断线重连
                _this._reConnectSocket();
            }
        });
        // 监听socket错误
        // @ts-ignore
        uni.onSocketError(function (res) {
            _this.config.debug && console.error( res);
            // 目前还不清楚socket出错会不会导致open关闭 暂时默认不关闭
            // IsOpen = false;
            IsLogin = false;
            if (_this.config.isReconnect) {
                _this.initSocket();
            }
            typeof _this.config.onSocketError === 'function' && _this.config.onSocketError(res);
        });
    }
    // 发送socket消息
    PromiseWebSocket.prototype._sendSocketMessage = function (data) {
        return new Promise(function (resolve, reject) {
            // @ts-ignore
			// console.log(data);
            uni.sendSocketMessage({
                data: JSON.stringify(data),
                success: function (res) { return resolve(res); },
                fail: function (fail) { return reject(fail); }
            });
        });
    };
    // socket 重连
    PromiseWebSocket.prototype._reConnectSocket = function () {
        var _this = this;
        if (!IsLogin) {
            reConnectTimer = setInterval(function () {
                _this.config.debug && console.warn('%c [uni-socket-promise] %c 重新连接:');
                _this.initSocket(function (e) {
                    if (e.config.isSendHeart) {
                        e.config.debug && console.log('%c [uni-socket-promise] %c 开始心跳:');
                        e._clearHeart();
                        e._startHeart();
                    }
                    clearInterval(reConnectTimer);
                    reConnectTimer = null;
                }, function (err, e) {
                    e.config.debug && console.log('%c [socket] %c 重新连接失败', err);
                });
            }, this.config.reConnectTime);
        }
    };
    // 清理心跳
    PromiseWebSocket.prototype._clearHeart = function () {
        clearInterval(heartTimer);
        heartTimer = null;
    };
    // 开始心跳
    PromiseWebSocket.prototype._startHeart = function () {
        heartTimer = setInterval(function () {
            // @ts-ignore
            uni.sendSocketMessage({
                data: JSON.stringify({
					action:4,
					msg:{
						"heartbeat":"zywy",
						},
				}) 
            });
        }, this.config.heartTime);
    };
    return PromiseWebSocket;
}());
exports.default = PromiseWebSocket;
