import { padding, to_binary, split, utf16_to_utf8, little_endian, uint_add, loop_shift_left } from './lib';
var A = 0x67452301;
var B = 0xefcdab89;
var C = 0x98badcfe;
var D = 0x10325476;
function F(b, c, d) {
    return (b & c) | (~b & d);
}
function G(b, c, d) {
    return (b & d) | (c & ~d);
}
function H(b, c, d) {
    return b ^ c ^ d;
}
function I(b, c, d) {
    return c ^ (b | ~d);
}
var S = [
    7,
    12,
    17,
    22,
    7,
    12,
    17,
    22,
    7,
    12,
    17,
    22,
    7,
    12,
    17,
    22,
    5,
    9,
    14,
    20,
    5,
    9,
    14,
    20,
    5,
    9,
    14,
    20,
    5,
    9,
    14,
    20,
    4,
    11,
    16,
    23,
    4,
    11,
    16,
    23,
    4,
    11,
    16,
    23,
    4,
    11,
    16,
    23,
    6,
    10,
    15,
    21,
    6,
    10,
    15,
    21,
    6,
    10,
    15,
    21,
    6,
    10,
    15,
    21
];
function T(i) {
    return Math.floor(Math.pow(2, 32) * Math.abs(Math.sin(i + 1)));
}
function x_index(i) {
    if (i >= 0 && i <= 15)
        return i;
    if (i >= 16 && i <= 31)
        return (5 * i + 1) % 16;
    if (i >= 32 && i <= 47)
        return (3 * i + 5) % 16;
    if (i >= 48 && i <= 63)
        return (7 * i) % 16;
    return 0;
}
function wrap(m) {
    return function (a, b, c, d, x, s, t) {
        // 循环左移
        return uint_add(loop_shift_left(uint_add(a, m(b, c, d), x, t), s), b);
    };
}
function porcess_message(str) {
    var length = str.length;
    var length_of_zero = 63 - ((length + 8) % 64);
    str += String.fromCharCode(128);
    var strArray = padding(str.split(''), length + 1 + length_of_zero, String.fromCharCode(0));
    // use 64 bit to store the raw message length at the end
    var tail = split(padding(to_binary((length * 8) % Math.pow(2, 64), 64), 64, '0'), 8)
        .reverse()
        .map(function (x) { return parseInt(x, 2); });
    var head = strArray.map(function (x) { return x.charCodeAt(0); });
    return Uint32Array.from(split(head.concat(tail), 4)
        .map(function (x) {
        return x.map(function (t) { return padding(t.toString(16), 2, '0', false); }).join('');
    })
        .map(function (x) { return parseInt(x, 16); })
        .map(function (x) { return parseInt(little_endian(x), 16); }));
}
function fghi(i) {
    if (i >= 0 && i <= 15)
        return F;
    if (i >= 16 && i <= 31)
        return G;
    if (i >= 32 && i <= 47)
        return H;
    if (i >= 48 && i <= 63)
        return I;
}
function fghi_wrapped(i) {
    return wrap(fghi(i));
}
export default function md5(str) {
    str = utf16_to_utf8(str);
    var uint32_array = porcess_message(str);
    var result = Uint32Array.from([A, B, C, D]);
    var chunks = split(Array.from(uint32_array), 16);
    for (var _i = 0, chunks_1 = chunks; _i < chunks_1.length; _i++) {
        var chunk = chunks_1[_i];
        var a = result[0];
        var b = result[1];
        var c = result[2];
        var d = result[3];
        for (var i = 0; i < 64; i++) {
            result[(4 - (i % 4)) % 4] = fghi_wrapped(i)(result[(4 - (i % 4)) % 4], result[(4 - (i % 4) + 1) % 4], result[(4 - (i % 4) + 2) % 4], result[(4 - (i % 4) + 3) % 4], chunk[x_index(i)], S[i], T(i));
        }
        result[0] = a + result[0];
        result[1] = b + result[1];
        result[2] = c + result[2];
        result[3] = d + result[3];
    }
    return Array.from(result)
        .map(function (x) { return little_endian(x); })
        .join('')
        .toLowerCase();
}
//# sourceMappingURL=main.js.map